#!/usr/bin/env python3

import logging
import sys
from argparse import ArgumentParser
from datetime import datetime
from email.message import EmailMessage
from mailbox import Mailbox
from typing import Union, Any, Optional

import platformdirs
from icalendar import Event, Calendar

from eml2cal.config import get_config, validate_config, ConfigError
from eml2cal.emails import get_mailbox
from eml2cal.extractor import build_cmd, extract
from eml2cal.postprocess import reservation_to_ical_event, event_is_valid
from eml2cal.preprocess import preprocess_email
from eml2cal.schema_org import is_reservation


def process_email(email: EmailMessage, config: dict[str, Any]) -> list[Event]:
    """Process a single email, determining whether it contains one or more relevant events and returning a list of
    :class:`Event` objects if so.
    """
    logging.debug(f"Processing email: {email['Subject']}")
    cmd = build_cmd(config)
    thing_dicts = extract(cmd, email.as_bytes())
    reservation_dicts = list(filter(is_reservation, thing_dicts))
    if reservation_dicts:
        logging.debug(f"Found {len(reservation_dicts)} reservation objects.")

    events = []
    non_events = 0
    for d in reservation_dicts:
        try:
            e = reservation_to_ical_event(d, config)
            if e is not None:
                events.append(e)
            else:
                non_events += 1
        except Exception as e:
            logging.error(e)
            raise e

    valid_events = []
    if events:
        logging.debug(f"Generated {len(events)} calendar events.")
        for e in events:
            if event_is_valid(e):
                valid_events.append(e)
            else:
                non_events += 1
    if non_events:
        logging.debug(f"{non_events} reservations could not be converted to events.")
    return valid_events


def process_mailbox(
        mb: Mailbox,
        config: dict[str, Any]
) -> Optional[tuple[Calendar, list[dict[str, Union[str, int]]]]]:
    """Process each email in the given mailbox.

    :param mb: The :class:`Mailbox` to iterate for messages to process.
    :param config: A dict containing configuration options (parsed from a config file).
    :return: A tuple containing:
        0. a :class:`Calendar` containing all events found in the mailbox.
        1. details of the events that were found.
    """

    events: list[Event] = []
    details: list[dict[str, Union[str, int]]] = []
    added_times: set[tuple[datetime, datetime]] = set()
    for msg in mb:
        preprocess_email(msg, config)
        new_events = process_email(msg, config)
        dupes = 0
        for e in new_events:
            t = (e.get("dtstart"), e.get("dtend"))
            if t not in added_times:
                events.append(e)
                added_times.add(t)
            else:
                dupes += 1
        if new_events:
            details.append({
                "date": msg.get("Date"),
                "from": msg.get("From"),
                "subject": msg.get("Subject"),
                "num_events": len(new_events),
                "duplicates": dupes
            })

    cal = Calendar()
    for e in events:
        cal.add_component(e)
    return cal, details


# Delivery

def print_cal(cal: Calendar):
    print(cal.to_ical().decode())


def get_argparser() -> ArgumentParser:
    parser = ArgumentParser(
        prog="eml2cal",
        description="Generate calendar events from emails"
    )
    parser.add_argument("-c", "--config", metavar="PATH", help="Path to config file to use.",
                        default=platformdirs.user_config_dir("eml2cal"))
    parser.add_argument("-d", "--debug", action="store_true", help="Verbose logging.")
    return parser


def main():
    parser = get_argparser()
    ns = parser.parse_args()
    if ns.debug:
        logging.basicConfig(level=logging.DEBUG)
    config = get_config(ns.config)
    try:
        validate_config(config)
    except ConfigError as e:
        sys.stdout.write(str(e))
        sys.exit(1)

    mb = get_mailbox(config)
    cal, details = process_mailbox(mb, config)
    print_cal(cal)
    print(details)


if __name__ == "__main__":
    main()
